package main

import "time"

type PollChoice struct {
	Text      string `json:"text"`
	VoteCount int    `json:"voteCount"`
	Votes     int    `json:"votes"`
	ChoiceID  string `json:"choiceId"`
}

type Poll struct {
	ID                 string        `json:"_id"`
	Choices            []*PollChoice `json:"choices"`
	Restriction        string        `json:"restriction"`
	StartDate          time.Time     `json:"startDate"`
	EndDate            time.Time     `json:"endDate"`
	BracketPollShortID string        `json:"bracketPollShortId"`
}

type Bracket struct {
	LastBrackets  []int `json:"lastBrackets"`
	RoundNumber   int   `json:"roundNumber"`
	NextGame      int   `json:"nextGame"`
	BracketNumber int   `json:"bracketNumber"`
	Dummy         bool  `json:"dummy"`
	Poll          *Poll `json:"poll"`
}

type AutoGenerated struct {
	Poll struct {
		Question         string        `json:"question"`
		QuestionMedia    string        `json:"questionMedia"`
		StartDate        interface{}   `json:"startDate"`
		EndDate          interface{}   `json:"endDate"`
		Choices          []interface{} `json:"choices"`
		AllowMultiChoice bool          `json:"allowMultiChoice"`
		EnableComments   bool          `json:"enableComments"`
		EnableCaptcha    bool          `json:"enableCaptcha"`
		HideResults      bool          `json:"hideResults"`
		Restriction      string        `json:"restriction"`
	} `json:"poll"`
	BracketPoll struct {
		Title            string        `json:"title"`
		TitleMedia       string        `json:"titleMedia"`
		HideRoundResults bool          `json:"hideRoundResults"`
		EnableCaptcha    bool          `json:"enableCaptcha"`
		Participants     []interface{} `json:"participants"`
		Schedules        []interface{} `json:"schedules"`
		Brackets         []interface{} `json:"brackets"`
		Restriction      string        `json:"restriction"`
	} `json:"bracketPoll"`
	Notification struct {
		Level string `json:"level"`
	} `json:"notification"`
	ScreenSize struct {
		Width    int  `json:"width"`
		Height   int  `json:"height"`
		IsMobile bool `json:"isMobile"`
	} `json:"screenSize"`
	User struct {
		PollCreated         bool `json:"pollCreated"`
		ShowAuthNotVerified bool `json:"showAuthNotVerified"`
		ShowAlreadyVoted    bool `json:"showAlreadyVoted"`
		ShowVoteSuccess     bool `json:"showVoteSuccess"`
		EmbedMode           bool `json:"embedMode"`
		HasAdBlocker        bool `json:"hasAdBlocker"`
	} `json:"user"`
	Routing struct {
		LocationBeforeTransitions interface{} `json:"locationBeforeTransitions"`
	} `json:"routing"`
	ReduxAsyncConnect struct {
		Loaded    bool `json:"loaded"`
		LoadState struct {
			Response struct {
				Loading bool        `json:"loading"`
				Loaded  bool        `json:"loaded"`
				Error   interface{} `json:"error"`
			} `json:"response"`
		} `json:"loadState"`
		Response struct {
			Status int `json:"status"`
			Data   struct {
				Brackets         []*Bracket `json:"brackets"`
				Title            string     `json:"title"`
				TitleMedia       string     `json:"titleMedia"`
				HideRoundResults bool       `json:"hideRoundResults"`
				ShortID          string     `json:"shortId"`
			} `json:"data"`
		} `json:"response"`
	} `json:"reduxAsyncConnect"`
}
